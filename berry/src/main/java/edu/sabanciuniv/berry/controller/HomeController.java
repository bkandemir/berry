package edu.sabanciuniv.berry.controller;


import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import edu.sabanciuniv.berry.domain.Authority;
import edu.sabanciuniv.berry.domain.Mail;
import edu.sabanciuniv.berry.domain.Note;
import edu.sabanciuniv.berry.domain.User;
import edu.sabanciuniv.berry.mail.EmailService;
import edu.sabanciuniv.berry.repository.AuthorityRepository;
import edu.sabanciuniv.berry.repository.NoteByUsernameRepository;
import edu.sabanciuniv.berry.repository.NoteRepository;
import edu.sabanciuniv.berry.repository.SearchNoteRepository;
import edu.sabanciuniv.berry.repository.UserRepository;



@Controller
public class HomeController {
	
	public User currentUser = new User();
	public User selectedUser = new User();
	
	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired 
	private UserRepository userRepository;
	
	@Autowired
	private AuthorityRepository authorityRepository;
	
	@Autowired
	private NoteRepository noteRepository;
		
	@Autowired
	private NoteByUsernameRepository notebyUsernameRepository;
	
	@Autowired
	private SearchNoteRepository searchNoteRepository;
	
	@Autowired
    private EmailService emailService;

	
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String welcome(ModelMap model) {		
		model.addAttribute("userList", userRepository.findAll());				
		return "welcome";
	}
	

	// Login form
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login() {
		if (SecurityContextHolder.getContext().getAuthentication() != null
				&& SecurityContextHolder.getContext().getAuthentication().isAuthenticated()
				&& !(SecurityContextHolder.getContext().getAuthentication() instanceof AnonymousAuthenticationToken)) {
			return "redirect:/";
		} else {		
			return "login";
		}
	}
	
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login(@Valid User user, BindingResult result, HttpServletRequest request,Model model) {
		if (result.hasErrors()){
			return "login";		
		}else{
			Optional<User> check = userRepository.findById(user.getUsername());
			if(check.isPresent()==true){
				if (check.get().getUsername().equals(user.getUsername()) && check.get().getPassword().equals(user.getPassword())){
					currentUser.setUsername(check.get().getUsername().toString()); 
					currentUser.setFirstName(check.get().getFirstName().toString());
					currentUser.setLastName(check.get().getLastName().toString());
					currentUser.setSchoolID(check.get().getSchoolID());
					currentUser.setEmail(check.get().getEmail());
					return "redirect:/index";
				}
				else{
					model.addAttribute("logError","logError");
					return "login";
				} 
			}
			else{ 
				model.addAttribute("logError","logError");
				return "login";
			}
		}	
	}

	
	// Login form
	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String register(ModelMap model) {
		if (SecurityContextHolder.getContext().getAuthentication() != null
				&& SecurityContextHolder.getContext().getAuthentication().isAuthenticated()
				&& !(SecurityContextHolder.getContext().getAuthentication() instanceof AnonymousAuthenticationToken)) {
			// user has already logged in
			return "redirect:/";
		} else {
			model.addAttribute("user", new User());
			return "register";
		}
	}
	

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String register(@Valid User user, BindingResult result, HttpServletRequest request) {
		if (result.hasErrors()) {
			return "register";
		} else {
			Optional<User> check = userRepository.findById(user.getUsername());
			if (check.isPresent() == false) {
				userRepository.save(user);

				Authority auth = new Authority();
				auth.setUsername(user.getUsername());
				auth.setRole("ROLE_USER");
				authorityRepository.save(auth);
				if(!user.getEmail().isEmpty()) {
					mail(user.getEmail(),"Welcome to berry!","Share or browse your content whenever you want!");			
				}
				return "login";
			} else { // it means that this username exists
				return "redirect:/register?error";
			}
		}	
	}
	
	
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public String index(ModelMap model) {
		model.addAttribute("noteList", noteRepository.findAll());				
		return "index";
	}
	
	
	@RequestMapping(value = "/addnote", method = RequestMethod.GET)
	public String addnote(ModelMap model) {		
		model.addAttribute("note", new Note());
		return "addnote";
	}
	
	
	
	@RequestMapping(value = "/addnote", method = RequestMethod.POST)
	public String addnote(@Valid Note note, BindingResult result, HttpServletRequest request) {		
		if (result.hasErrors()){
			return "addnote";
		
		}else{
			//Hangi kullanıcı ekledi
			note.setUserID(currentUser.getUsername());
			if(!currentUser.getEmail().isEmpty()) {
				mail(currentUser.getEmail(),"Content Uploaded","Your content is uploaded successfully.");			
			}
			noteRepository.save(note);
		}	
		
		return "redirect:/index";
	}
	
	
	@RequestMapping("/profile")
	public String profile(Model md) {		
		if(currentUser.getUsername()==null || currentUser.getSchoolID()==null) {
			return "redirect:/login";
		}		
		Optional<User> test=userRepository.findById(currentUser.getUsername());
		md.addAttribute("user", test);						
		md.addAttribute("noteList", notebyUsernameRepository.findTitleById(currentUser.getUsername()));		
		return "profile";
	}
	
	
	@RequestMapping(value = "/guest", method = RequestMethod.GET)
	public String guest(ModelMap model) {		
		model.addAttribute("noteList", noteRepository.findAll());				
		return "guest";
	}

	
	@RequestMapping(value = "/settings", method = RequestMethod.POST)
	public String settings(@Valid User user, BindingResult result, HttpServletRequest request) {
		
		if (result.hasErrors()) {
			return "settings";
		
		} else{		
			if(!currentUser.getEmail().isEmpty()) {
				mail(currentUser.getEmail(),"Password Changed","Your password is changed. You can login with your new password.");			
			}
			userRepository.save(user);
		}			
		return "redirect:/login";
	}
	
		
	@RequestMapping(value = "/settings", method = RequestMethod.GET)
	public String settings(Model model) {		
		Optional<User> test=userRepository.findById(currentUser.getUsername());
		model.addAttribute("user", test);
		return "settings";
	}	
	
    
	@RequestMapping(value="/search", method = RequestMethod.POST)
    public String search(@RequestParam(value="courseName") String courseName, Model model)
    {
		List<Note> notes = new ArrayList<Note>();		
		if(courseName=="") {			
			Iterable<Note> u = noteRepository.findAll();
	        Iterator uIterator = u.iterator();
	        while (uIterator.hasNext())
	        {
	            notes.add((Note)uIterator.next());
	        }		
		}else {
			Iterable<Note> u = searchNoteRepository.findByCourseNameContaining(courseName);
			Iterator uIterator = u.iterator();
			while (uIterator.hasNext())
			{
				notes.add((Note)uIterator.next());
			}			
		}
        model.addAttribute("noteList", notes);
        model.addAttribute("notesCount", notes.size());
        model.addAttribute("notehStr", courseName);
        
        return "index";
    }
	
	
	@RequestMapping(value="/guestSearch", method = RequestMethod.POST)
    public String guestsearch(@RequestParam(value="courseName") String courseName, Model model)
    {
		List<Note> notes = new ArrayList<Note>();		
		if(courseName=="") {			
			Iterable<Note> u = noteRepository.findAll();
	        Iterator uIterator = u.iterator();
	        while (uIterator.hasNext())
	        {
	            notes.add((Note)uIterator.next());
	        }			
			
		}else {
			Iterable<Note> u = searchNoteRepository.findByCourseNameContaining(courseName);
			Iterator uIterator = u.iterator();
			while (uIterator.hasNext())
			{
				notes.add((Note)uIterator.next());
			}			
		}
        model.addAttribute("noteList", notes);
        model.addAttribute("notesCount", notes.size());
        model.addAttribute("notehStr", courseName);
        
        return "guest";
    }
	
	
	@RequestMapping(value="/searchuserbyid", method = RequestMethod.GET)
    public String userSearch()
    {
		return "searchuser";
    }
	
	
	@RequestMapping(value="/searchuserbyid", method = RequestMethod.POST)
    public String userSearch(@RequestParam(value="username") String username, Model model)
    {
		List<User> users = new ArrayList<User>();		
		if(username=="") {			
			Iterable<User> u = userRepository.findAll();
	        Iterator uIterator = u.iterator();
	        while (uIterator.hasNext()){
	            users.add((User)uIterator.next());
	        }						
		}else {

			Iterable<User> u = userRepository.findByUserNameContaining(username);
			Iterator uIterator = u.iterator();
			while (uIterator.hasNext())
			{
				users.add((User)uIterator.next());
			}			
		}
        model.addAttribute("userList", users);
        model.addAttribute("userCount", users.size());
        model.addAttribute("userStr", username);
        
        return "searchuser";
    }
	
	
	@RequestMapping(value = "/searchuser", method = RequestMethod.POST)
	public String searchuser(@RequestParam String username,Model md) {
		
		md.addAttribute("user", new User());
		selectedUser.setUsername(username);						
		return "redirect:/userprofile";
	}
	
	
	@RequestMapping("searchuser")
	public String searchuser(Model md) {		
		md.addAttribute("user", new User());		
		md.addAttribute("userList", userRepository.findAll());						
		return "searchuser";
	}
		
	
	@RequestMapping(value = "/userprofile", method = RequestMethod.GET)
	public String userprofile(Model md) {		
		if(selectedUser.getUsername()==null && selectedUser.getSchoolID()==null) {
			return "redirect:/login";
		}		
		Optional<User> selectedUsr=userRepository.findById(selectedUser.getUsername());
		md.addAttribute("user", selectedUsr);
		md.addAttribute("noteList", notebyUsernameRepository.findTitleById(selectedUser.getUsername()));
	
		return "userprofile";
	}
	
	public void mail(String email,String subject,String content) {
		Mail mail = new Mail();
        mail.setFrom("infoberryapplication@gmail.com");
        mail.setTo(email);
        mail.setSubject(subject);
        mail.setContent(content);

        try {
			
        	emailService.sendMail(mail);
		
        } catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@RequestMapping(value="/forgetpassword", method = RequestMethod.GET)
    public String forgetpassword(Model md)
    {    
		md.addAttribute("user", new User());
        return "forgetpassword";
    }
	
	@RequestMapping(value="/forgetpassword", method = RequestMethod.POST)
    public String forgetpassword(@RequestParam(value="username") String username, Model model)
    {
		List<User> User = new ArrayList<User>();
		if(username=="") {			
			return "forgetpassword";
		}else {
			Optional<User> u = userRepository.findById(username);
			if(u.isPresent()) {
				if(!u.get().getEmail().isEmpty()) {
					mail(u.get().getEmail(),"Password Requested","Your Password:"+u.get().getPassword()+". Please reset your password when loggen in.");			
				}
			}
		}
        
        return "redirect:/login";
    }
	
}
